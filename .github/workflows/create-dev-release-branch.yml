name: Create DEV release branch

on:
  pull_request:
    types: [labeled]

jobs:
  create-dev-release-branch:
    if: github.event.label.name == 'ready for dev testing'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release/dev branch exists
        id: check-branch
        run: |
          if git ls-remote --heads origin release/dev | grep -q "release/dev"; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release/dev branch
        if: steps.check-branch.outputs.branch_exists == 'false'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git checkout -b release/dev
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin release/dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge PR to release/dev branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mergeMethod = context.payload.pull_request.labels.some(label => label.name === 'don\'t squash') ? 'rebase' : 'squash';
            
            // Get the PR details to check mergeable state
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            if (pr.data.mergeable_state === 'conflicting') {
              core.setFailed('Cannot merge PR: Conflicts detected with release/dev branch');
              return;
            }

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: mergeMethod,
              base: 'release/dev',
              author_name: context.payload.pull_request.user.login,
              author_email: context.payload.pull_request.user.email || `${context.payload.pull_request.user.login}@users.noreply.github.com`
            });
