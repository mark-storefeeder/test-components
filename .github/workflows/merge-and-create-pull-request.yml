name: Merge and create pull request

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

jobs:
  merge-and-create-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check whether branch name matches target
        run: |
          if [ "${{ github.ref_name }}" = "${{ inputs.branch_name }}" ]; then
            echo "The pull request cannot be merged because the branch name matches the target branch name (${{ inputs.branch_name }})"
            exit 1
          fi

      - name: Check whether branch exists
        id: check-branch
        run: |
          if git ls-remote --heads origin ${{ inputs.branch_name }} | grep -q "${{ inputs.branch_name }}"; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Change base branch
        if: steps.check-branch.outputs.branch_exists == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              base: '${{ inputs.branch_name }}'
            });

            // Wait a moment for GitHub to update the mergeable state
            await new Promise(resolve => setTimeout(resolve, 2000));

      - name: Check for conflicts
        id: check-conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            if (pr.data.mergeable_state === 'conflicting') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '❌ The pull request cannot be merged due to conflicts with the ${{ inputs.branch_name }} branch'
              });

              core.setFailed('The pull request cannot be merged due to conflicts with the ${{ inputs.branch_name }} branch');

              return false;
            }

            return true;

      - name: Create branch
        if: steps.check-branch.outputs.branch_exists == 'false'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git checkout -b ${{ inputs.branch_name }}
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin ${{ inputs.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Change base branch 2
        if: steps.check-branch.outputs.branch_exists == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              base: '${{ inputs.branch_name }}'
            });

      - name: Merge pull request
        if: steps.check-conflicts.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mergeMethod = context.payload.pull_request.labels.some(label => label.name === 'don\'t squash') ? 'rebase' : 'squash';

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: mergeMethod,
              author_name: context.payload.pull_request.user.login,
              author_email: context.payload.pull_request.user.email || `${context.payload.pull_request.user.login}@users.noreply.github.com`
            });

      - name: Create pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if a pull request already exists
            const existingPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: '${{ inputs.branch_name }}',
              base: 'main',
              state: 'open'
            });

            if (existingPRs.data.length === 0) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '${{ inputs.branch_name }}',
                head: '${{ inputs.branch_name }}',
                base: 'main'
              })
              .then(async (response) => {
                // Add 'don't squash' label to the pull request
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: response.data.number,
                  labels: ['don\'t squash']
                });
              });
            }
